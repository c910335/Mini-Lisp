#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require './lisp.rex'

$variables = {
   '+' => ->(p) { s = 0; p.each { |n| s += n.call }; s },
   '-' => ->(p) { p[0].call - p[1].call },
   '*' => ->(p) { s = 1; p.each { |n| s *= n.call }; s },
   '/' => ->(p) { p[0].call / p[1].call },
   'mod' => ->(p) { p[0].call % p[1].call },
   '>' => ->(p) { p[0].call > p[1].call },
   '<' => ->(p) { p[0].call < p[1].call },
   '=' => ->(p) { p[0].call == p[1].call },
   'and' => ->(p) { p[0].call && p[1].call },
   'or' => ->(p) { p[0].call || p[1].call },
   'not' => ->(p) {!p[0].call},
   'print-num' => lambda { |p|
      str = p.first.call.to_i
      puts str
      str
   },
   'print-bool' => lambda { |p|
      str = p.first.call ? '#t' : '#f'
      puts str
      str
   },
   'if' => ->(p) { if p[0].call then p[1].call else p[2].call end },
   'define' => ->(p) { $variables[p[0].name] = p[1] }
}

class Exp
   def initialize func, params
      @func, @params = func, params
   end

   def call
      @func.call @params
   end
end

def func_new params, exp
   lambda do |p|
      values = []
      p.each do |ap|
         v = if ap.is_a?(Exp) || ap.is_a?(Identifier) && !ap.raw.is_a?(Proc)
                ap.call
             else
                ap
             end
         values << v
      end
      stack = []
      params.each_index do |i|
         stack << $variables[params[i].name]
         $variables[params[i].name] = values[i]
      end
      r = exp.call
      params.each do |id|
         $variables[id.name] = stack.shift
      end
      r
   end
end

class Identifier

   attr_reader :name

   def initialize name
      @name = name
   end

   def raw
      $variables[@name]
   end

   def call p = nil
      p.nil? ? $variables[@name].call : $variables[@name].call(p)
   end
end

class Fixnum
   def call
      self
   end
end

class String
   def call
      self
   end
end

class Lisp < Racc::Parser

module_eval(<<'...end lisp.racc/module_eval...', 'lisp.racc', 115)

...end lisp.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     8,    12,     3,    14,    20,     5,     6,     7,     3,   nil,
   nil,     5,     6,     7,     3,   nil,    11,     5,     6,     7,
     3,    15,   nil,     5,     6,     7,     3,    18,   nil,     5,
     6,     7,     3,   nil,   nil,     5,     6,     7 ]

racc_action_check = [
     1,     8,     1,    11,    19,     1,     1,     1,     0,   nil,
   nil,     0,     0,     0,     3,   nil,     3,     3,     3,     3,
    13,    13,   nil,    13,    13,    13,    17,    17,   nil,    17,
    17,    17,    18,   nil,   nil,    18,    18,    18 ]

racc_action_pointer = [
     6,     0,   nil,    12,   nil,   nil,   nil,   nil,     1,   nil,
   nil,     1,   nil,    18,   nil,   nil,   nil,    24,    30,     1,
   nil ]

racc_action_default = [
   -11,   -11,    -2,   -11,    -7,    -8,    -9,   -10,   -11,    -1,
    -5,   -11,    21,   -11,    -5,    -3,    -4,   -11,   -11,   -11,
    -6 ]

racc_goto_table = [
     2,     9,    13,    10,     1,   nil,    17,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19 ]

racc_goto_check = [
     2,     2,     4,     2,     1,   nil,     4,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     4,     0,   nil,    -8 ]

racc_goto_default = [
   nil,   nil,    16,     4,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 9, :_reduce_1,
  1, 9, :_reduce_2,
  4, 11, :_reduce_3,
  2, 12, :_reduce_4,
  0, 12, :_reduce_5,
  7, 10, :_reduce_6,
  1, 10, :_reduce_none,
  1, 10, :_reduce_none,
  1, 10, :_reduce_none,
  1, 10, :_reduce_10 ]

racc_reduce_n = 11

racc_shift_n = 21

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  ")" => 3,
  :FUNC => 4,
  :NUMBER => 5,
  :BOOL => 6,
  :ID => 7 }

racc_nt_base = 8

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "\")\"",
  "FUNC",
  "NUMBER",
  "BOOL",
  "ID",
  "$start",
  "main",
  "param",
  "exp",
  "params" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'lisp.racc', 4)
  def _reduce_1(val, _values, result)
     puts val[3].call 
    result
  end
.,.,

module_eval(<<'.,.,', 'lisp.racc', 5)
  def _reduce_2(val, _values, result)
     puts val[0].call 
    result
  end
.,.,

module_eval(<<'.,.,', 'lisp.racc', 7)
  def _reduce_3(val, _values, result)
     result = Exp.new val[1], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'lisp.racc', 9)
  def _reduce_4(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'lisp.racc', 10)
  def _reduce_5(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'lisp.racc', 12)
  def _reduce_6(val, _values, result)
     result = func_new val[3], val[5] 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'lisp.racc', 16)
  def _reduce_10(val, _values, result)
     result = Identifier.new val[0] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Lisp


lisp = Lisp.new
loop do
   print '> '
   begin
      lisp.scan_str(gets)
   rescue ParseError
      puts 'Syntax Error'
   end
end
